/* This file was generated by PyBindGen 0.17.0 */
#define PY_SSIZE_T_CLEAN
#include <Python.h>
#include <stddef.h>


#if PY_VERSION_HEX >= 0x03000000
typedef void* cmpfunc;
#define PyCObject_FromVoidPtr(a, b) PyCapsule_New(a, NULL, b)
#define PyCObject_AsVoidPtr(a) PyCapsule_GetPointer(a, NULL)
#define PyString_FromString(a) PyBytes_FromString(a)
#define Py_TPFLAGS_CHECKTYPES 0 /* this flag doesn't exist in python 3 */
#endif


#if     __GNUC__ > 2
# define PYBINDGEN_UNUSED(param) param __attribute__((__unused__))
#elif     __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ > 4)
# define PYBINDGEN_UNUSED(param) __attribute__((__unused__)) param
#else
# define PYBINDGEN_UNUSED(param) param
#endif  /* !__GNUC__ */

#ifndef _PyBindGenWrapperFlags_defined_
#define _PyBindGenWrapperFlags_defined_
typedef enum _PyBindGenWrapperFlags {
   PYBINDGEN_WRAPPER_FLAG_NONE = 0,
   PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED = (1<<0),
} PyBindGenWrapperFlags;
#endif


#include "../../../KCBv2/KCBv2Lib.h"
/* --- forward declarations --- */


typedef struct {
    PyObject_HEAD
    KCBFrameDescription *obj;
    PyBindGenWrapperFlags flags:8;
} PyKCBFrameDescription;


extern PyTypeObject PyKCBFrameDescription_Type;


typedef struct {
    PyObject_HEAD
    KCBAudioFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyKCBAudioFrame;


extern PyTypeObject PyKCBAudioFrame_Type;


typedef struct {
    PyObject_HEAD
    KCBBodyIndexFrame *obj;
    PyBindGenWrapperFlags flags:8;
} PyKCBBodyIndexFrame;


extern PyTypeObject PyKCBBodyIndexFrame_Type;

/* --- module functions --- */


PyObject *
_wrap_KCBv2Lib_KCBCloseSensor(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs)
{
    PyObject *py_retval;
    long retval;
    int  kcbHandle;
    const char *keywords[] = {"kcbHandle", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "i", (char **) keywords, &kcbHandle)) {
        return NULL;
    }
    retval = KCBCloseSensor(&kcbHandle);
    py_retval = Py_BuildValue((char *) "l", retval);
    return py_retval;
}
PyObject * _wrap_KCBv2Lib_KCBCloseSensor(PyObject * PYBINDGEN_UNUSED(dummy), PyObject *args, PyObject *kwargs);


PyObject *
_wrap_KCBv2Lib_KCBOpenDefaultSensor()
{
    PyObject *py_retval;
    int retval;

    retval = KCBOpenDefaultSensor();
    py_retval = Py_BuildValue((char *) "i", retval);
    return py_retval;
}
PyObject * _wrap_KCBv2Lib_KCBOpenDefaultSensor();

static PyMethodDef KCBv2Lib_functions[] = {
    {(char *) "KCBCloseSensor", (PyCFunction) _wrap_KCBv2Lib_KCBCloseSensor, METH_KEYWORDS|METH_VARARGS, NULL },
    {(char *) "KCBOpenDefaultSensor", (PyCFunction) _wrap_KCBv2Lib_KCBOpenDefaultSensor, METH_NOARGS, NULL },
    {NULL, NULL, 0, NULL}
};
/* --- classes --- */


static PyObject* _wrap_PyKCBFrameDescription__get_width(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->width);
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_width(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->width)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_height(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "i", self->obj->height);
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_height(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "i", &self->obj->height)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_horizontalFieldOfView(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->horizontalFieldOfView);
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_horizontalFieldOfView(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->horizontalFieldOfView)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_verticalFieldOfView(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->verticalFieldOfView);
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_verticalFieldOfView(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->verticalFieldOfView)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_diagonalFieldOfView(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->diagonalFieldOfView);
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_diagonalFieldOfView(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->diagonalFieldOfView)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_lengthInPixels(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->lengthInPixels));
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_lengthInPixels(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->lengthInPixels)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBFrameDescription__get_bytesPerPixel(PyKCBFrameDescription *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "N", PyLong_FromUnsignedLong(self->obj->bytesPerPixel));
    return py_retval;
}
static int _wrap_PyKCBFrameDescription__set_bytesPerPixel(PyKCBFrameDescription *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "I", &self->obj->bytesPerPixel)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyKCBFrameDescription__getsets[] = {
    {
        (char*) "width", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_width, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_width, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "diagonalFieldOfView", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_diagonalFieldOfView, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_diagonalFieldOfView, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "height", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_height, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_height, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "lengthInPixels", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_lengthInPixels, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_lengthInPixels, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "bytesPerPixel", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_bytesPerPixel, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_bytesPerPixel, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "horizontalFieldOfView", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_horizontalFieldOfView, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_horizontalFieldOfView, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "verticalFieldOfView", /* attribute name */
        (getter) _wrap_PyKCBFrameDescription__get_verticalFieldOfView, /* C function to get the attribute */
        (setter) _wrap_PyKCBFrameDescription__set_verticalFieldOfView, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyKCBFrameDescription__tp_init__0(PyKCBFrameDescription *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBFrameDescription();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyKCBFrameDescription__tp_init__1(PyKCBFrameDescription *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyKCBFrameDescription *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyKCBFrameDescription_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBFrameDescription(*((PyKCBFrameDescription *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyKCBFrameDescription__tp_init(PyKCBFrameDescription *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyKCBFrameDescription__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyKCBFrameDescription__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyKCBFrameDescription__copy__(PyKCBFrameDescription *self)
{

    PyKCBFrameDescription *py_copy;
    py_copy = PyObject_New(PyKCBFrameDescription, &PyKCBFrameDescription_Type);
    py_copy->obj = new KCBFrameDescription(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyKCBFrameDescription_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyKCBFrameDescription__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyKCBFrameDescription__tp_dealloc(PyKCBFrameDescription *self)
{
        KCBFrameDescription *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyKCBFrameDescription__tp_richcompare (PyKCBFrameDescription *PYBINDGEN_UNUSED(self), PyKCBFrameDescription *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyKCBFrameDescription_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyKCBFrameDescription_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "KCBv2Lib.KCBFrameDescription",            /* tp_name */
    sizeof(PyKCBFrameDescription),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyKCBFrameDescription__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyKCBFrameDescription__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyKCBFrameDescription_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyKCBFrameDescription__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyKCBFrameDescription__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyKCBAudioFrame__get_cAudioBufferSize(PyKCBAudioFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "k", self->obj->cAudioBufferSize);
    return py_retval;
}
static int _wrap_PyKCBAudioFrame__set_cAudioBufferSize(PyKCBAudioFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &self->obj->cAudioBufferSize)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBAudioFrame__get_pAudioBuffer(PyKCBAudioFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *pybuf;

    pybuf = PyCapsule_New(self->obj->pAudioBuffer, "pAudioBuffer", NULL);
    py_retval = Py_BuildValue((char *) "N", pybuf);
    return py_retval;
}
static int _wrap_PyKCBAudioFrame__set_pAudioBuffer(PyKCBAudioFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "pybuf", &self->obj->pAudioBuffer)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBAudioFrame__get_ulBytesRead(PyKCBAudioFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "k", self->obj->ulBytesRead);
    return py_retval;
}
static int _wrap_PyKCBAudioFrame__set_ulBytesRead(PyKCBAudioFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &self->obj->ulBytesRead)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBAudioFrame__get_fBeamAngle(PyKCBAudioFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->fBeamAngle);
    return py_retval;
}
static int _wrap_PyKCBAudioFrame__set_fBeamAngle(PyKCBAudioFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->fBeamAngle)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBAudioFrame__get_fBeamAngleConfidence(PyKCBAudioFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "f", self->obj->fBeamAngleConfidence);
    return py_retval;
}
static int _wrap_PyKCBAudioFrame__set_fBeamAngleConfidence(PyKCBAudioFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "f", &self->obj->fBeamAngleConfidence)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyKCBAudioFrame__getsets[] = {
    {
        (char*) "cAudioBufferSize", /* attribute name */
        (getter) _wrap_PyKCBAudioFrame__get_cAudioBufferSize, /* C function to get the attribute */
        (setter) _wrap_PyKCBAudioFrame__set_cAudioBufferSize, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "fBeamAngle", /* attribute name */
        (getter) _wrap_PyKCBAudioFrame__get_fBeamAngle, /* C function to get the attribute */
        (setter) _wrap_PyKCBAudioFrame__set_fBeamAngle, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "fBeamAngleConfidence", /* attribute name */
        (getter) _wrap_PyKCBAudioFrame__get_fBeamAngleConfidence, /* C function to get the attribute */
        (setter) _wrap_PyKCBAudioFrame__set_fBeamAngleConfidence, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "ulBytesRead", /* attribute name */
        (getter) _wrap_PyKCBAudioFrame__get_ulBytesRead, /* C function to get the attribute */
        (setter) _wrap_PyKCBAudioFrame__set_ulBytesRead, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "pAudioBuffer", /* attribute name */
        (getter) _wrap_PyKCBAudioFrame__get_pAudioBuffer, /* C function to get the attribute */
        (setter) _wrap_PyKCBAudioFrame__set_pAudioBuffer, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyKCBAudioFrame__tp_init__0(PyKCBAudioFrame *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBAudioFrame();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyKCBAudioFrame__tp_init__1(PyKCBAudioFrame *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyKCBAudioFrame *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyKCBAudioFrame_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBAudioFrame(*((PyKCBAudioFrame *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyKCBAudioFrame__tp_init(PyKCBAudioFrame *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyKCBAudioFrame__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyKCBAudioFrame__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyKCBAudioFrame__copy__(PyKCBAudioFrame *self)
{

    PyKCBAudioFrame *py_copy;
    py_copy = PyObject_New(PyKCBAudioFrame, &PyKCBAudioFrame_Type);
    py_copy->obj = new KCBAudioFrame(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyKCBAudioFrame_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyKCBAudioFrame__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyKCBAudioFrame__tp_dealloc(PyKCBAudioFrame *self)
{
        KCBAudioFrame *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyKCBAudioFrame__tp_richcompare (PyKCBAudioFrame *PYBINDGEN_UNUSED(self), PyKCBAudioFrame *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyKCBAudioFrame_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyKCBAudioFrame_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "KCBv2Lib.KCBAudioFrame",            /* tp_name */
    sizeof(PyKCBAudioFrame),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyKCBAudioFrame__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyKCBAudioFrame__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyKCBAudioFrame_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyKCBAudioFrame__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyKCBAudioFrame__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};



static PyObject* _wrap_PyKCBBodyIndexFrame__get_Size(PyKCBBodyIndexFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "k", self->obj->Size);
    return py_retval;
}
static int _wrap_PyKCBBodyIndexFrame__set_Size(PyKCBBodyIndexFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "k", &self->obj->Size)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBBodyIndexFrame__get_Buffer(PyKCBBodyIndexFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;
    PyObject *pybuf;

    pybuf = PyCapsule_New(self->obj->Buffer, "Buffer", NULL);
    py_retval = Py_BuildValue((char *) "N", pybuf);
    return py_retval;
}
static int _wrap_PyKCBBodyIndexFrame__set_Buffer(PyKCBBodyIndexFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "pybuf", &self->obj->Buffer)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyObject* _wrap_PyKCBBodyIndexFrame__get_TimeStamp(PyKCBBodyIndexFrame *self, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "L", self->obj->TimeStamp);
    return py_retval;
}
static int _wrap_PyKCBBodyIndexFrame__set_TimeStamp(PyKCBBodyIndexFrame *self, PyObject *value, void * PYBINDGEN_UNUSED(closure))
{
    PyObject *py_retval;

    py_retval = Py_BuildValue((char *) "(O)", value);
    if (!PyArg_ParseTuple(py_retval, (char *) "L", &self->obj->TimeStamp)) {
        Py_DECREF(py_retval);
        return -1;
    }
    Py_DECREF(py_retval);
    return 0;
}
static PyGetSetDef PyKCBBodyIndexFrame__getsets[] = {
    {
        (char*) "Size", /* attribute name */
        (getter) _wrap_PyKCBBodyIndexFrame__get_Size, /* C function to get the attribute */
        (setter) _wrap_PyKCBBodyIndexFrame__set_Size, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "Buffer", /* attribute name */
        (getter) _wrap_PyKCBBodyIndexFrame__get_Buffer, /* C function to get the attribute */
        (setter) _wrap_PyKCBBodyIndexFrame__set_Buffer, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    {
        (char*) "TimeStamp", /* attribute name */
        (getter) _wrap_PyKCBBodyIndexFrame__get_TimeStamp, /* C function to get the attribute */
        (setter) _wrap_PyKCBBodyIndexFrame__set_TimeStamp, /* C function to set the attribute */
        NULL, /* optional doc string */
        NULL /* optional additional data for getter and setter */
    },
    { NULL, NULL, NULL, NULL, NULL }
};


static int
_wrap_PyKCBBodyIndexFrame__tp_init__0(PyKCBBodyIndexFrame *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    const char *keywords[] = {NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "", (char **) keywords)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBBodyIndexFrame();
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

static int
_wrap_PyKCBBodyIndexFrame__tp_init__1(PyKCBBodyIndexFrame *self, PyObject *args, PyObject *kwargs, PyObject **return_exception)
{
    PyKCBBodyIndexFrame *ctor_arg;
    const char *keywords[] = {"ctor_arg", NULL};

    if (!PyArg_ParseTupleAndKeywords(args, kwargs, (char *) "O!", (char **) keywords, &PyKCBBodyIndexFrame_Type, &ctor_arg)) {
        {
            PyObject *exc_type, *traceback;
            PyErr_Fetch(&exc_type, return_exception, &traceback);
            Py_XDECREF(exc_type);
            Py_XDECREF(traceback);
        }
        return -1;
    }
    self->obj = new KCBBodyIndexFrame(*((PyKCBBodyIndexFrame *) ctor_arg)->obj);
    self->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return 0;
}

int _wrap_PyKCBBodyIndexFrame__tp_init(PyKCBBodyIndexFrame *self, PyObject *args, PyObject *kwargs)
{
    int retval;
    PyObject *error_list;
    PyObject *exceptions[2] = {0,};
    retval = _wrap_PyKCBBodyIndexFrame__tp_init__0(self, args, kwargs, &exceptions[0]);
    if (!exceptions[0]) {
        return retval;
    }
    retval = _wrap_PyKCBBodyIndexFrame__tp_init__1(self, args, kwargs, &exceptions[1]);
    if (!exceptions[1]) {
        Py_DECREF(exceptions[0]);
        return retval;
    }
    error_list = PyList_New(2);
    PyList_SET_ITEM(error_list, 0, PyObject_Str(exceptions[0]));
    Py_DECREF(exceptions[0]);
    PyList_SET_ITEM(error_list, 1, PyObject_Str(exceptions[1]));
    Py_DECREF(exceptions[1]);
    PyErr_SetObject(PyExc_TypeError, error_list);
    Py_DECREF(error_list);
    return -1;
}


static PyObject*
_wrap_PyKCBBodyIndexFrame__copy__(PyKCBBodyIndexFrame *self)
{

    PyKCBBodyIndexFrame *py_copy;
    py_copy = PyObject_New(PyKCBBodyIndexFrame, &PyKCBBodyIndexFrame_Type);
    py_copy->obj = new KCBBodyIndexFrame(*self->obj);
    py_copy->flags = PYBINDGEN_WRAPPER_FLAG_NONE;
    return (PyObject*) py_copy;
}

static PyMethodDef PyKCBBodyIndexFrame_methods[] = {
    {(char *) "__copy__", (PyCFunction) _wrap_PyKCBBodyIndexFrame__copy__, METH_NOARGS, NULL},
    {NULL, NULL, 0, NULL}
};

static void
_wrap_PyKCBBodyIndexFrame__tp_dealloc(PyKCBBodyIndexFrame *self)
{
        KCBBodyIndexFrame *tmp = self->obj;
        self->obj = NULL;
        if (!(self->flags&PYBINDGEN_WRAPPER_FLAG_OBJECT_NOT_OWNED)) {
            delete tmp;
        }
    Py_TYPE(self)->tp_free((PyObject*)self);
}

static PyObject*
_wrap_PyKCBBodyIndexFrame__tp_richcompare (PyKCBBodyIndexFrame *PYBINDGEN_UNUSED(self), PyKCBBodyIndexFrame *other, int opid)
{

    if (!PyObject_IsInstance((PyObject*) other, (PyObject*) &PyKCBBodyIndexFrame_Type)) {
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    }
    switch (opid)
    {
    case Py_LT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_LE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_EQ:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_NE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GE:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    case Py_GT:
        Py_INCREF(Py_NotImplemented);
        return Py_NotImplemented;
    } /* closes switch (opid) */
    Py_INCREF(Py_NotImplemented);
    return Py_NotImplemented;
}

PyTypeObject PyKCBBodyIndexFrame_Type = {
    PyVarObject_HEAD_INIT(NULL, 0)
    (char *) "KCBv2Lib.KCBBodyIndexFrame",            /* tp_name */
    sizeof(PyKCBBodyIndexFrame),                  /* tp_basicsize */
    0,                                 /* tp_itemsize */
    /* methods */
    (destructor)_wrap_PyKCBBodyIndexFrame__tp_dealloc,        /* tp_dealloc */
    (printfunc)0,                      /* tp_print */
    (getattrfunc)NULL,       /* tp_getattr */
    (setattrfunc)NULL,       /* tp_setattr */
    (cmpfunc)NULL,           /* tp_compare */
    (reprfunc)NULL,             /* tp_repr */
    (PyNumberMethods*)NULL,     /* tp_as_number */
    (PySequenceMethods*)NULL, /* tp_as_sequence */
    (PyMappingMethods*)NULL,   /* tp_as_mapping */
    (hashfunc)NULL,             /* tp_hash */
    (ternaryfunc)NULL,          /* tp_call */
    (reprfunc)NULL,              /* tp_str */
    (getattrofunc)NULL,     /* tp_getattro */
    (setattrofunc)NULL,     /* tp_setattro */
    (PyBufferProcs*)NULL,  /* tp_as_buffer */
    Py_TPFLAGS_DEFAULT,                      /* tp_flags */
    NULL,                        /* Documentation string */
    (traverseproc)NULL,     /* tp_traverse */
    (inquiry)NULL,             /* tp_clear */
    (richcmpfunc)_wrap_PyKCBBodyIndexFrame__tp_richcompare,   /* tp_richcompare */
    0,             /* tp_weaklistoffset */
    (getiterfunc)NULL,          /* tp_iter */
    (iternextfunc)NULL,     /* tp_iternext */
    (struct PyMethodDef*)PyKCBBodyIndexFrame_methods, /* tp_methods */
    (struct PyMemberDef*)0,              /* tp_members */
    PyKCBBodyIndexFrame__getsets,                     /* tp_getset */
    NULL,                              /* tp_base */
    NULL,                              /* tp_dict */
    (descrgetfunc)NULL,    /* tp_descr_get */
    (descrsetfunc)NULL,    /* tp_descr_set */
    0,                 /* tp_dictoffset */
    (initproc)_wrap_PyKCBBodyIndexFrame__tp_init,             /* tp_init */
    (allocfunc)PyType_GenericAlloc,           /* tp_alloc */
    (newfunc)PyType_GenericNew,               /* tp_new */
    (freefunc)0,             /* tp_free */
    (inquiry)NULL,             /* tp_is_gc */
    NULL,                              /* tp_bases */
    NULL,                              /* tp_mro */
    NULL,                              /* tp_cache */
    NULL,                              /* tp_subclasses */
    NULL,                              /* tp_weaklist */
    (destructor) NULL                  /* tp_del */
};


#if PY_VERSION_HEX >= 0x03000000
static struct PyModuleDef KCBv2Lib_moduledef = {
    PyModuleDef_HEAD_INIT,
    "KCBv2Lib",
    NULL,
    -1,
    KCBv2Lib_functions,
};
#endif


#if PY_VERSION_HEX >= 0x03000000
    #define MOD_ERROR NULL
    #define MOD_INIT(name) PyObject* PyInit_##name(void)
    #define MOD_RETURN(val) val
#else
    #define MOD_ERROR
    #define MOD_INIT(name) void init##name(void)
    #define MOD_RETURN(val)
#endif
#if defined(__cplusplus)
extern "C"
#endif
#if defined(__GNUC__) && __GNUC__ >= 4
__attribute__ ((visibility("default")))
#endif


MOD_INIT(KCBv2Lib)
{
    PyObject *m;
    #if PY_VERSION_HEX >= 0x03000000
    m = PyModule_Create(&KCBv2Lib_moduledef);
    #else
    m = Py_InitModule3((char *) "KCBv2Lib", KCBv2Lib_functions, NULL);
    #endif
    if (m == NULL) {
        return MOD_ERROR;
    }
    /* Register the 'KCBFrameDescription' class */
    if (PyType_Ready(&PyKCBFrameDescription_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "KCBFrameDescription", (PyObject *) &PyKCBFrameDescription_Type);
    /* Register the 'KCBAudioFrame' class */
    if (PyType_Ready(&PyKCBAudioFrame_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "KCBAudioFrame", (PyObject *) &PyKCBAudioFrame_Type);
    /* Register the 'KCBBodyIndexFrame' class */
    if (PyType_Ready(&PyKCBBodyIndexFrame_Type)) {
        return MOD_ERROR;
    }
    PyModule_AddObject(m, (char *) "KCBBodyIndexFrame", (PyObject *) &PyKCBBodyIndexFrame_Type);
    return MOD_RETURN(m);
}
